{"version":3,"sources":["containers/Item.js","components/List.js","components/SelectDate.js","components/SelectState.js","containers/Container.js","containers/Count.js","lib/visibilityFilter.js","App.js","serviceWorker.js","index.js"],"names":["Item","_ref","_ref$datum","datum","_ref$datum$date","date","formatted","time","event","location","city","state","sourceLabel","sourceURL","react_default","a","createElement","href","List","data","visibilityFilter","map","key","concat","SelectDate","_ref$handleChange","handleChange","console","log","label","react","Label","DatePicker","dateFormat","onChange","formatDisplayLabel","format","SelectState","states","Select","_ref2","value","className","classNamePrefix","options","isMulti","isSearchable","placeholder","styled","main","_templateObject","Count","count","total","require","isAfter","isBefore","addDays","Object","slicedToArray","dateStart","dateEnd","filter","_ref3","length","includes","_ref4","parsed","App","undefined","_this","setState","defineProperty","_this$state","this","Container","stateList","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d332fdd8.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default ({\n  datum: {\n    date: { formatted, time },\n    event,\n    location,\n    city,\n    state,\n    sourceLabel,\n    sourceURL\n  }\n}) => (\n  <li>\n    <h3>{event}</h3>\n    <h4>{location}</h4>\n    <div>\n      {city}, {state}\n    </div>\n    <div>\n      {formatted}, {time}\n    </div>\n    <div>\n      Source: <a href={sourceURL}>{sourceLabel}</a>{\" \"}\n    </div>\n  </li>\n)\n","import React, { Fragment } from \"react\"\nimport Item from \"../containers/Item\"\n\nexport default ({ data, visibilityFilter }) => (\n  <ul>\n    {visibilityFilter(data).map(datum => (\n      <Item key={`${datum.key}-I`} datum={datum} />\n    ))}\n  </ul>\n)\n","import React, { Fragment } from \"react\"\nimport { Label } from \"@atlaskit/field-base\"\nimport { DatePicker } from \"@atlaskit/datetime-picker\"\nimport { format } from \"date-fns\"\n\nexport default ({ handleChange = console.log, label }) => (\n  <Fragment>\n    <Label label={label} />\n    <DatePicker\n      dateFormat=\"MMMM D, YYYY\"\n      onChange={handleChange}\n      formatDisplayLabel={format}\n    />\n  </Fragment>\n)\n","import React, { Fragment } from \"react\"\nimport Select from \"@atlaskit/select\"\nimport { Label } from \"@atlaskit/field-base\"\n\nexport default ({\n  label,\n  states,\n  handleChange = console.log\n}) => (\n  <Fragment>\n    <Label label={label} />\n    <Select\n      onChange={states =>\n        handleChange(states.map(({ value }) => value))\n      }\n      className=\"multi-select\"\n      classNamePrefix=\"react-select\"\n      options={states}\n      isMulti\n      isSearchable={false}\n      placeholder=\"Choose a State\"\n    />\n  </Fragment>\n)\n","import styled from \"styled-components\"\n\nexport default styled.main`\n  display: grid;\n  width: 100%;\n  grid-template-columns: 1fr;\n`\n","import React from \"react\"\n\nexport default ({ count, total }) => (\n  <h3>\n    {count} matches out of {total}.\n  </h3>\n)\n","const { isAfter, isBefore, addDays } = require(\"date-fns\")\n\nconst isEmpty = xs => xs.length === 0\n\nexport const visibilityFilter = (\n  states,\n  [dateStart, dateEnd]\n) => data =>\n  data\n    .filter(\n      ({ state }) =>\n        !isEmpty(states) ? states.includes(state) : true\n    )\n    .filter(\n      ({ date: { parsed } }) =>\n        dateStart && dateEnd\n          ? isAfter(parsed, dateStart) &&\n            isBefore(parsed, addDays(dateEnd, 1))\n          : true\n    )\n","import React, { Component, Fragment } from \"react\"\n\nimport data from \"./data/data\"\nimport stateList from \"./data/states\"\nimport List from \"./components/List\"\nimport SelectDate from \"./components/SelectDate\"\nimport SelectState from \"./components/SelectState\"\nimport Container from \"./containers/Container\"\nimport Count from \"./containers/Count\"\n\nimport { visibilityFilter } from \"./lib\"\n\nclass App extends Component {\n  state = {\n    states: [],\n    dateStart: undefined,\n    dateEnd: undefined,\n    data\n  }\n\n  handleChange = key => value => {\n    this.setState(() => ({\n      [key]: value\n    }))\n  }\n\n  render() {\n    const { states, dateStart, dateEnd } = this.state\n    return [\n      <Container>\n        <SelectDate\n          handleChange={this.handleChange(\"dateStart\")}\n          label=\"Select a start date\"\n        />\n        <SelectDate\n          handleChange={this.handleChange(\"dateEnd\")}\n          label=\"And an end date\"\n        />\n        <SelectState\n          handleChange={this.handleChange(\"states\")}\n          label=\"Select your statez\"\n          states={stateList}\n        />\n        <Count\n          count={\n            visibilityFilter(states, [dateStart, dateEnd])(\n              data\n            ).length\n          }\n          total={data.length}\n        />\n      </Container>,\n      <Container>\n        <List\n          data={this.state.data}\n          visibilityFilter={visibilityFilter(states, [\n            dateStart,\n            dateEnd\n          ])}\n        />\n      </Container>\n    ]\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}